<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于习惯</title>
      <link href="/2022/01/19/%E5%85%B3%E4%BA%8E%E4%B9%A0%E6%83%AF/"/>
      <url>/2022/01/19/%E5%85%B3%E4%BA%8E%E4%B9%A0%E6%83%AF/</url>
      
        <content type="html"><![CDATA[<p>刷牙洗脸时，放点 <code>BGM</code>，不仅能放松心情，还能变身电影主角，放点新闻、财经等资讯，不仅能 <code>get</code> 到更多有用信息，还能唤醒大脑，调整好状态~</p><span id="more"></span><p>1.保持早睡，至少能修复 30% 的颜值bug。</p><p>2.猛看片，不挑国家。<br>不管是中国的，日本的还是美国的，各个国家的奥斯卡、纪录片、TED、科普片都可以去看。<br>补充自己的知识盲区，聊天时还能有更多话题。</p><p>3.不刷朋友圈、抖音。<br>每天比同龄人，至少多出1小时时间，用来看书、护肤、健身。</p><p>4.吃饭时，不看任何电子屏幕（手机、电视、电脑）。<br>很简单，追剧不差这点时间，反而一起吃饭的人很重要，多聊会天，说不定就发现了一个好项目。其次，还能防止颈椎病。</p><p>5.说话柔软，内心坚硬，做事果断。<br>做到这三点的人，人生会像开挂一样，工作顺利，爱情美满~</p><p>6.嘴巴闭合时，舌尖要轻抵在上颚，脸型才会更好看，呼吸也会更顺畅哦~</p><p>7.双击屏幕你会发现新大陆（解锁一个快捷功能）。</p><p>8.一不开心就喜欢收拾东西，等到房间被收拾得焕然一新，心情就开始变美丽。我爸还说，我这习惯让他少挨几顿骂（捂脸笑）。</p><p>9.多向大佬学习。<br>结识良师益友，是成长进步的最快方式。</p><p>10.提高睡眠质量，才能高效休息，提高做事效率！</p><p>提高睡眠质量的小技巧：<br>①睡前不进食不喝水；<br>②睡前三件套：泡脚、冥想、听书；<br>③裸睡。</p><p>11.人生80%的时间，往往都要用来工作，解决问题，剩下的20%时间，一定要做一些能减压的事。<br>比如，假期去小众景点旅行，感受异地人文风情和自然风光，既为生活增添乐趣，还能让工作更有动力~</p><p>12.永远保持对新知识、新技能的汲取。<br>不论是生活还是工作上的技能，每天花30分钟专注去学习，会让你避免原地踏步的同时，有机会抓住更多机遇和意外惊喜。</p><p>13.定期运动。<br>慢跑、俯卧撑、卷腹、瑜伽等等都可以。坚持下来，你会发现，以后遇到什么困境和挑战，都难不倒你！</p><p>14.灵活运用「番茄工作法」。<br>工作学习25min，用5min来休息。人的注意力是极易分散的，无法长时间专注。将时间分块的好处是，可以保证每个时间段内，注意力是最集中的。</p><p>15.拜访亲朋好友，带点水果、酒水过去，对方口里说不用不用，其实心里乐着呢！</p><p>16.早起时，不要老想着起床的痛苦，要想想一些让人幸福的事，刺激一下你的大脑皮层，提高大脑兴奋度。<br>比如，可以吃一顿美味的早餐，可以看到暗恋的同学/同事。</p><p>17.刷牙洗脸时，放点BGM，不仅能放松心情，还能变身电影主角，放点新闻、财经等资讯，不仅能get到更多有用信息，还能唤醒大脑，调整好状态~</p><p>18.再忙也要吃早餐，给自己充充电。<br>黛西有段时间工作忙，经常不吃早餐，结果皮肤超干，整个人沧桑了三岁！而且，还会因为饿肚子，拉低至少10%的工作效率！</p><p>19.没事的时候，就双击屏幕一下，可以防止手指麻木。</p><p>20.做事要有「提前思维」。<br>比如，睡前想一想明天要做的事，把要带出门的东西准备好（文件、证件、钥匙、纸巾等等）。这样，第二天就不会慌慌张张，忘东忘西啦。</p><p>21.千万别躺着接工作电话！<br>躺着接电话声音会不一样，会让你整个人都显得很懒。<br>每次我躺着接我妈电话，她在电话里头都能准确判断出来：你是不是还在睡觉？哎～</p><p>22.出门前，无论多急，都花5秒照下镜子。<br>不光可以检查一下发型、穿搭，还可以对镜子里的自己笑一笑，给自己打打气！没有搬不完的砖，只有不努力的打工人，加油，打工人！</p><p>23.日常分类记账，并坚持理财。比如伙食、交通、服饰、生活用品等等，让自己知道赚的钱大头都花哪了，避免浪费。<br>接着学会理财，这是提高经济力的最核心关键。操作得当，会使你的收入实现指数级增长。<br>大学时我就开始学理财，最终成功在没毕业前就攒下了十万的小金库，这也成了我创立工作室的底气之一。</p><p>24.在小红书上学简单耐看的懒人餐，不仅造福自己，还能造福身边人。或许，还能凭借精湛厨艺，俘获你的心动男神/女神哦~</p><p>25.微信发消息，少发语音，能发文字就发文字。（异地恋情侣除外）</p><p>26.不会在朋友圈立各种flag，只会在成功后分享喜悦。<br>立各种flag，别人只会在心里想：咦~又在吹牛皮；直接晒出成绩单，别人才会疯狂给你摁点赞。</p><p>27.生活遇到难题，先花5分钟时间嚼一块口香糖，再去思考怎么处理。</p><p>28.学会自己消化糟糕的情绪。<br>再痛苦，也不会随便找人倾诉。你哭得再大声，别人只会觉得你很吵。你的伤疤再深，别人只会觉得很难看。</p><p>29.需要专注做事时，比如写文、写报告，会做这三件事：<br>①把手机有多远放多远<br>②用发夹把头发挽起，深呼吸一口气<br>③心里默念：3、2、1，变身！<br>完成这三件事，我敲键盘的手速快过你抢红包、打游戏！</p><p>30.享受独处的时间。<br>不必通过合群证明自己，别人参加各种局的时间，可以用来沉淀自己，认真生活。比如，散步、听歌、读书，都挺好。</p><p>31.要想治好拖延症，凡事先做「10min」。<br>万事开头难，当你开始做了10min，你会发现继续做下去也没有那么难。</p><p>32.坚持写作，坚持用备忘录记录灵感。写作不仅可以用输出倒逼输入，还能通过写作变现。</p><p>33.读书，各种类型都去读。<br>哲学类、社科类、历史类 、文学类 、自然科学类等等。读书，是一辈子都值得去做的事，持续大量地阅读能带给你的，不止是浮于纸面的知识，更重要的是对你思维认知的隐性提升。</p><p>34.每天花15min，复盘一下当日。<br>问问自己，今天收获了什么？哪里做的不好？做得不好的原因是什么？以后怎样避免或改进？坚持一个月，你会发现你能把事都做得更好了。</p><p>35.及时清洗穿过的内衣裤，并且不要和其他衣服混着洗，这样才能防止细菌交叉感染，身体才会干干净净，无异味~</p><p>36.下载时间管理APP记录时间，不要再问时间都跑哪去了。</p><p>37.不追求100%达标，75%就够了。<br>人不是电脑程序，不是下达指令就能100%执行。不用对自己要求太高，逼急了只会自暴自弃。</p><p>38.减肥减不下去时，学习学不下去时，想想刘昊然、想想王一博、想想易烊千玺。</p><p>39.适当「直爽」一些。<br>别人请教专业问题，会耐心为他解答，一来可以帮助别人，二来可以巩固自身专业知识。如果对方送小礼物，会大方收下并表达惊喜。因为，有来有往，才能让关系更亲密、更融洽~</p><p>40.拒绝「低价值」社交。<br>几百年没联系的同学，突然让你参加他的婚礼；关系很一般的同事，邀你下载拼多多帮他砍一刀。不想去，不想下载，就找个理由拒绝。不要想着拒绝别人不好，平时也没见他们这么关心你。</p><p>41.不会一股脑地帮别人。因为有些忙，有些人，真的不值得帮！</p><p>42.为自己保留1㎡的「秘密空间」。<br>没有神秘感的人，就像一部没有悬念的书，看了几眼就让人不想再读。</p><p>43.去外地时，带一个轻便的相机扫街。<br>拍下街道上摇摇晃晃的树影，拍下小巷子里下棋的老爷爷，拍下路边的煎饼果子摊。<br>不是为了发朋友圈，而是为了感受更多烟火气息，给日常写作带来更多奇妙的灵感~</p><p>44.听别人发表不同观点时，不随意中断他人的讲话，而是耐心聆听，认真消化。这样不仅显得你有礼貌、有教养，还能让你从中学会用不同的视角看问题。</p><p>45.日常多说谢谢，尤其是别人帮你拿外卖、快递的时候，你不经意的一句「谢谢」，对小哥就是莫大的鼓舞。</p><blockquote><p>来自知乎 <a href="https://zhuanlan.zhihu.com/p/455946799">强烈推荐让你脱胎换骨的45个好习惯！</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 习惯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>松静匀乐</title>
      <link href="/2022/01/17/%E6%9D%BE%E9%9D%99%E5%8C%80%E4%B9%90/"/>
      <url>/2022/01/17/%E6%9D%BE%E9%9D%99%E5%8C%80%E4%B9%90/</url>
      
        <content type="html"><![CDATA[<p><code>松静匀乐</code> 的意思是魏书生 <code>注意力体操</code> 的阐述。</p><span id="more"></span><p>魏书生谈：关于 “注意力体操” 的阐述：就四个字：松、静、匀、乐。</p><p>第一是松，什么松，身体松。学生来到学校无非就是看看书、写写字、算算题、想想事，哪有一件是让你崩紧肌肉的？越崩紧肌肉，心情越紧张，思路越不流畅，效率越低。让我们把自己身体的各个器官都放松，让二百多块骨头都放松，让一百四十亿个大脑细胞，全身五十多万亿个各种细胞全都松下来。</p><p>第二是静，什么静，心灵静。守住心灵的宁静，守住自己内心世界的真善美，积极的、向上的、乐观的真谛，坚守、坚守、再坚守，拓展、拓展、再拓展，你就能找到了你自己发展的空间。</p><p>第三是匀，呼吸匀畅。处理一些事情时，均匀呼吸五次，这样做是平和心态，不至于处理问题时出现过激的行为。</p><p>第四是乐，什么乐，情绪乐。人这一辈子，百分之九十九的事，自己说了不算，你只要能看得开，想得透，出得来，放得下，别跟人较劲儿。咱来不来，咱说了不算，咱走不走，咱还说了不算，咱没来这地方之前，谁想过来这走上一遭呢？</p>]]></content>
      
      
      <categories>
          
          <category> 人性 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Python办公自动化须知</title>
      <link href="/2022/01/12/%E5%85%B3%E4%BA%8EPython%E5%8A%9E%E5%85%AC%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
      <url>/2022/01/12/%E5%85%B3%E4%BA%8EPython%E5%8A%9E%E5%85%AC%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a><code>操作系统</code></h3><p>本教程 <a href="https://python-automation.docs.tplan.cc/#/">Python办公自动化</a> 环境基于 <code>Windows</code> 环境，笔者认为 <code>Linux</code> 并不适合作为 <code>Python</code> 自动化的操作平台，至少不是自动化操作最好的系统，<code>Windows</code> 系统使用用户居三个操作系统之首，受众面广，软件兼容性较强，可视化操作相比 <code>Linux</code> 系统简单易用得多，这也是受普遍大量用户青睐的重要原因。</p><span id="more"></span><p>当然 <code>Mac</code> 系统的交互性和美观性不在 <code>Windows</code> 之下，但就如上面所说的，受众面不够广，<code>10</code>个人里大概有 <code>7</code>个人使用 <code>Windows</code> 系统，<code>2</code>个人使用 <code>Mac</code> 系统，还有<code>1</code>个人使用 <code>Linux</code> 系统，当然<code>Mac</code>系统使用的也是基于 <code>Unix</code> 的内核，这里不做详细对比。</p><h3 id="认识Python"><a href="#认识Python" class="headerlink" title="认识Python"></a>认识<code>Python</code></h3><p><code>Python</code> 是一种易于学习又功能强大的编程语言。它提供了高效的高级数据结构，还能简单有效地面向对象编程。<code>Python</code> 优雅的语法和动态类型，以及解释型语言的本质，使它成为多数平台上写脚本和快速开发应用的理想语言。</p><p><code>Python</code> 解释器易于扩展，可以使用 <code>C</code> 或 <code>C++</code>（或者其他可以通过 <code>C</code> 调用的语言）扩展新的功能和数据类型。<code>Python</code> 也可用于可定制化软件中的扩展程序语言。</p><p>目前<code>Python</code>分为多版本，<code>Python2</code> 已宣布不在维护，虽然信奉 <code>Python2</code> 的人还不在少数，但我还是建议你使用<code>Python3</code>(3.6以上版本)。</p><h3 id="你需要学习什么"><a href="#你需要学习什么" class="headerlink" title="你需要学习什么"></a><code>你需要学习什么</code></h3><ul><li><code>Python</code>集成和开发环境</li><li>数据结构</li><li>语言基础</li><li>常用关键字</li><li>自动化相关库操作</li><li>爬虫 (视情况而定)</li></ul><h3 id="RPA工具"><a href="#RPA工具" class="headerlink" title="RPA工具"></a><code>RPA</code>工具</h3><p><code>Python</code>对于自动化来说确实是一把利刃，但是有一定的开发门槛。</p><p>而<code>RPA</code>软件则是把这个脚本代码流程转换成了流程化、拖拽式的操作，一般而言，在代码中实现的一些语言结构上的东西都能用<code>RPA</code>工具来编写。</p><p>这是流程化操作层面的，当然绝大多数的<code>RPA</code>软件也支持编码模式，只是支持编码的语言不尽相同，有的支持.Net编程，有的支持<code>Python</code>编程，还有一些自定义的逻辑语言。这也是当下自动化工具和编程语言结合的一种工作模式，自动化流程完成不了的用编码填补，或是控件自动化流程过长，则用编码代替。</p><p>国内外 <code>rpa</code> 软件比比皆是，国外的 <code>rpa</code> 代表有 <code>AA</code>,<code>UIPATH</code>, 国内有 <code>uibot</code>，<code>影刀rpa</code>，<code>阿里rpa</code>, <code>一赛奇</code>等等……</p><p>其中<code>AA</code>和<code>UIPATH</code>是老国外相对较老的平台了，这里不做比较，国内软件从稳定性来看当属<code>影刀rpa</code>，<code>uibot</code>虽然功能齐全但欠缺稳定性，<code>阿里rpa</code> 虽然也支持了<code>Python扩展</code>但是产品的迭代出现了问题。</p><p>而影刀作为新生代的 <code>rpa</code> 解决了前面几个软件的弊端，不仅功能齐全，界面美观度高，还支持多机器人应用，<code>Python</code> 扩展以及第三方插件，灵活度较高。当然影刀集成的这一套 <code>rpa</code> 流程化应用和服务，主要面向企业应用，体验版本是免费的，但是功能首先，个人版约 2500/年，功能齐全但是没有控制台统一调度和配置，无法享受专业化的售后定制服务，目前企业版没有明码标价，需要联系影刀官方洽谈。</p><p>选择<code>影刀rpa</code> 很大程度上是因为它采用了 <code>Python</code> 引擎作为扩展，而 <code>Python</code> 在自动化处理方面正发挥着强大的威力！！！！</p><p>国内的<code>影刀</code>，<code>阿里RPA</code>都支持<code>Python扩展</code>，并且可以在应用时配合使用，控件和编码的连线，让自动化省去了更多的障碍。</p><blockquote><p>可惜这里<code>影刀</code>和<code>阿里RPA</code> 并没有给我赞助，所以就不铺开谈了 …..</p></blockquote><h3 id="关于现状"><a href="#关于现状" class="headerlink" title="关于现状"></a><code>关于现状</code></h3><p>现在不少针对 <code>Python</code> 语言的一些诟病都是从其<code>运行速度</code>和<code>性能</code>开始的。</p><p>抛开动态语言的编译和运行速度不谈，在日常的应用中，除了这些<code>Python</code>公认的通病之外，你是否真正的把这门语言用到了极致。</p><p>很少吧，我们日常使用可能只是用到了 <code>Python</code>的冰山一角，因为这足以应付我们的日常工作，特别是对于<code>自动化办公</code>，你可能不会深入去理解 <code>Python</code> 的一些<code>高阶用法</code>，<code>装饰器</code>、<code>闭包</code>、<code>元类</code>、<code>子类继承</code>、<code>多态</code>以及各种<code>设计模式</code>等等。</p><p>实话实说，现在不少的<code>初级工程师</code>也仅仅是在模块中实现一些简单明了的类示例，配合各种第三方库用起来也是无比的顺手，更重要的是保住了头发，这何乐而不为？</p><h3 id="关于效率"><a href="#关于效率" class="headerlink" title="关于效率"></a><code>关于效率</code></h3><p>如果你不再是一个新手，或者不想在外人看来像一个新手，你可能需要接触一些你日常代码之外的东西(<code>Python</code>之强远不止于此)。</p><p>如果你刚接触 <code>Python</code> 不久，那么你可能会使用诸如 <code>int</code>、 <code>str</code>、<code>list</code>、 <code>dict</code>、 <code>元组</code>、 <code>数组</code>等一些 <code>Python</code> 内置的基础<code>数据结构</code>，这很好。</p><p><code>Python</code> 的强大之处就在于简单的命令能让你看到一些不可思议的效果，一个 <code>list</code> 类型再加上一个 <code>dict</code> 类型能打下半边天，这也使得很多的初学者不愿意花更多的时间去深入了解一些底层的实现原理(<code>源码</code>、<code>算法结构</code>)，当然这不是必须的，况且对于很多的初学者来说，<code>Python</code>也只不过是工作中诸多工具中的一种，对的，<code>工具</code>。</p><p>但是如果你想让日常开发的代码更为<code>健壮</code>和<code>简洁</code>(<code>简洁即优美</code>不是吗)，那就需要尝试着去了解一些<code>Python</code>的高阶用法，就算仅仅是为了代码优化、提升运行效率，我也建议你能多去了解了解。</p><p>本教程注重实战，其中大部分代码也是笔者在日常工作中经常使用的，或经过反复验证的。</p><p>我希望通过大量通用的实例来帮助读者进行有效的实践，感受到 <code>Python</code> 为自动化办公带来的便利和效率。</p><p>毋庸置疑的是，<code>Python</code> 仍然是<code>自动化办公</code>中的首选语言，对，<code>首选</code>。</p><blockquote><p>本文来源：<a href="https://blog.tplan.cc/">T计划</a><br>版权声明：本文采用 知识共享 署名-非商业性使用-禁止演绎(CC BY-NC-ND)国际许可协议 进行许可</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 办公自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 办公自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>思维重组</title>
      <link href="/2022/01/12/%E6%80%9D%E7%BB%B4%E9%87%8D%E7%BB%84/"/>
      <url>/2022/01/12/%E6%80%9D%E7%BB%B4%E9%87%8D%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">问了一圈、终于还是没有人知道 思维重组 这个概念。这其中包括了记忆、归纳、思考和重组。</span><br><span class="line">既然至今仍无人提及此概念、我想我需要记录一些什么东西。</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="快速记忆"><a href="#快速记忆" class="headerlink" title="快速记忆"></a>快速记忆</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">有一些简单的日常训练，可以提升我们的归纳能力。</span><br><span class="line"></span><br><span class="line">归纳总结能力，也跟我们每个人的洞察力有关。</span><br><span class="line"></span><br><span class="line">面对一大堆庞杂浩瀚的信息，我们要学会深入观察，发现一些很多人所看不到的，更深层次的点。</span><br><span class="line"></span><br><span class="line">通过类比分析，寻找到一部分的共性和规律，合并同类型，分类梳理， 提炼精简出想要的内容。</span><br><span class="line"></span><br><span class="line">归纳力：牢记3要素摆脱信息混乱有时候，当我们参加一次会议，或是上司交待一项任务，</span><br><span class="line"></span><br><span class="line">一次传达给我们的信息比较多时，我们的大脑会处于一种“未归纳”的混乱状态，不知该如何着手。</span><br><span class="line"></span><br><span class="line">而造成这种状态的三大因素就是：没有或看不到目标；没有一定的“规则”；没有思维框架。</span><br><span class="line"></span><br><span class="line">所以，要训练我们的归纳能力，就要时刻意识到目标、规则、框架这三个要素。</span><br><span class="line"></span><br><span class="line">而最好的训练方法就是“收纳”。比如收拾办公桌。</span><br><span class="line"></span><br><span class="line">目标是：很快能找到必要的东西，保持清新舒爽的工作状态。</span><br><span class="line"></span><br><span class="line">鉴于此，需要设定一个规则：把最常使用之物放在最接近手边的位置。</span><br><span class="line"></span><br><span class="line">那么遵循这条规则，我们就会明确分类框架：即“按照物品使用频率进行分类”。我们常说“书桌是大脑的显兆”。</span><br><span class="line"></span><br><span class="line">如果目光所及之处归整完毕，那么想必大脑也是思路清晰的。这其中，框架又可分为“等级”和“类别”两部分。</span><br><span class="line"></span><br><span class="line">等级是上级包含下级的纵向关系，类别是把有相同点的信息归为一类的横向关系。</span><br><span class="line"></span><br><span class="line">我们接触到杂乱的信息时，从这两方面来思考，问题就会变得非常清晰。</span><br><span class="line"></span><br><span class="line">职场中，我们可能会遇到“是目的还是手段”“事实还是意见”等棘手的案例，</span><br><span class="line"></span><br><span class="line">在这种情况下，能够准确将信息进行区分归类的人，一定会被周围人所欣赏。</span><br><span class="line"></span><br><span class="line">如果你想成为这方面的达人，可以进行一项小训练：尽可能多地寻找信息间的共同点和相异点。</span><br><span class="line"></span><br><span class="line">比如，坐公交车时，你可以把乘客按不同类别归纳，玩手机的人、读书的人、睡觉的人；戴帽子和没戴帽子的人；去上班的人和出游的人等等。</span><br></pre></td></tr></table></figure><h3 id="做到零秒思考-A4纸笔记法"><a href="#做到零秒思考-A4纸笔记法" class="headerlink" title="做到零秒思考 (A4纸笔记法)"></a>做到零秒思考 (A4纸笔记法)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">假定某件事情从开始便是盘根错节且不具条理性。就比如说你平时开会的时候吧。</span><br><span class="line">两个部门协同开会，一个需求部门(假定为运营部)、另一个为开发部门(又假定你是开发部的一员)。</span><br><span class="line">首先运营部门</span><br></pre></td></tr></table></figure><blockquote><p>本文作者：T计划<br>版权声明：本文采用 知识共享 署名-非商业性使用-禁止演绎(CC BY-NC-ND)国际许可协议 进行许可</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 思维重组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维重组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 自动化之数据库</title>
      <link href="/2021/12/13/python-automation-sql/"/>
      <url>/2021/12/13/python-automation-sql/</url>
      
        <content type="html"><![CDATA[<h2 id="关于数据库"><a href="#关于数据库" class="headerlink" title="关于数据库"></a>关于数据库</h2><p><code>数据库</code>通常用于后端开发的数据存储以及搭建<code>大数据仓库</code>，<br>但这种理念在大数据和智能化办公时代正在被打破，现在越来越多的非开发工作者都开始使用数据库存储日常数据。</p><p>而不总是游离于<code>Excel</code>操作层面(当然<code>excel</code>是一个很好的跨时代产物)，从而实现了在可视化表格和数据库之间的完美<br>交互。</p><span id="more"></span><p>不仅为日常数据提供的<code>持久化</code>储存，同时在数据查询和大批量操作等方面也都将得到优化，数据库储存不再是开发者的专利。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><h3 id="MongoDB适合做什么"><a href="#MongoDB适合做什么" class="headerlink" title="MongoDB适合做什么"></a><code>MongoDB</code>适合做什么</h3><p><code>MongoDB</code>适合储存大量关联性不强的数据。<br><code>MongoDB</code>中的数据以”库”—“集合”—“文档”—“字段”结构进行储存。</p><p>这种结构咋看和传统关系型数据库的”库”—“表”—“行”—“列”结构非常像。</p><p>但是，<code>MongoDB</code>不需要预先定义表结构，数据的字段可以任意变动，并发写入速度也远远超过传统关系型数据库。</p><h3 id="Redis适合做什么"><a href="#Redis适合做什么" class="headerlink" title="Redis适合做什么"></a><code>Redis</code>适合做什么</h3><p><code>Redis</code>有多种数据结构，适合多种不同的应用场景。</p><p>1．使用<code>Redis</code>做缓存。<code>Redis</code>的字符串、哈希表两种数据结构适合用来储存大量的键值对信息，从而实现高速缓存。</p><p>2．使用<code>Redis</code>做队列。<br><code>Redis</code>有多几种数据结构适于做队列：</p><ul><li>使用<code>列表数据</code>结构，可以实现普通级和优先级队列的功能。</li><li>使用<code>有序集合</code>数据结构，可以实现优先级队列；</li><li>使用<code>哈希表数据</code>结构，可以实现延时队列。</li></ul><p>3．使用<code>Redis</code>去重。<br><code>Redis</code>有多几种数据结构适于做去重：</p><ul><li>利用<code>集合</code>数据结构，可以实现小批量数据的去重；</li><li>利用<code>字符串</code>数据结构的位操作，可以实现<code>布隆过滤器</code>，从而实现超大规模的数据去重；</li><li>利用<code>Redis</code>自带的<code>HyperLogLog</code>数据结构，可以实现超大规模数据的去重和计数。</li></ul><p>4．使用<code>Redis</code>实现积分板。<br><code>Redis</code>的<code>有序集合</code>功能可以实现积分板功能，还能实现自动排序、排名功能。</p><p>5．使用<code>Redis</code>实现<code>发布/订阅</code>功能。<br><code>Redis</code>自带的<code>发布/订阅</code>模式可以实现多对多的<code>发布/订阅</code>功能。</p><h3 id="MongoDB与Redis在多个领域中都有重要的应用。"><a href="#MongoDB与Redis在多个领域中都有重要的应用。" class="headerlink" title="MongoDB与Redis在多个领域中都有重要的应用。"></a><code>MongoDB</code>与<code>Redis</code>在多个领域中都有重要的应用。</h3><ul><li>在爬虫开发中，<code>MongoDB</code>主要用来写数据，<code>Redis</code>主要用来缓存网址。</li><li>在数据分析中，<code>MongoDB</code>的聚合操作用得较多。</li><li>在后端开发中，主要用到<code>MongoDB</code>的增、删、改、查功能，<code>Redis</code>主要用来做缓存。</li><li>在游戏开发中，<code>Redis</code>可以用来做排名功能。</li></ul><blockquote><p>如果希望更好地掌握<code>MongoDB</code>和<code>Redis</code>，<br>那么可以在多个领域都寻找项目来进行尝试，从而更全面地了解各个功能和应用场景。</p></blockquote><blockquote><p>摘自青南 《左手MongoDB，右手Redis》</p></blockquote><br><blockquote><p>本文作者：T计划<br>版权声明：本文采用 知识共享 署名-非商业性使用-禁止演绎(CC BY-NC-ND)国际许可协议 进行许可</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 办公自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 自动化之环境搭建</title>
      <link href="/2021/12/13/python-automation-env/"/>
      <url>/2021/12/13/python-automation-env/</url>
      
        <content type="html"><![CDATA[<h2 id="安装-Python"><a href="#安装-Python" class="headerlink" title="安装 Python"></a>安装 <code>Python</code></h2><p>基于 <code>Anaconda</code> 搭建 <code>Python</code> 环境</p><h3 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装<code>Anaconda</code></h3><p>不管是<code>Windows</code>或<code>Linux(Mac)</code> 系统都推荐使用<code>Anaconda</code>搭建<code>Python</code>环境，这是一个绝佳的选择。</p><p><code>Windows</code> 下安装 <code>Anaconda</code> 看起来只需要傻瓜式操作，最后再把它放入环境变量即可，这里不在详述 :smile:</p><span id="more"></span><h3 id="Linux-下安装Anaconda"><a href="#Linux-下安装Anaconda" class="headerlink" title="Linux 下安装Anaconda"></a><code>Linux</code> 下安装<code>Anaconda</code></h3><p>这里以<code>Centos7</code>为例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum update &amp;&amp;</span></span><br><span class="line">  yum -y install wget &amp;&amp;</span><br><span class="line">  wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh &amp;&amp;</span><br><span class="line">  bash ./Miniconda3-latest-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><p>由于某些原因，默认的<code>anaconda</code> 站点<code>wget</code>可能会比较慢，可以选择国内的镜像源平台进行安装，比如清华源就很优秀。</p><blockquote><p><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/">清华镜像站</a></p></blockquote><p>选择你适应的平台和系统版本，<code>wget</code> 下载至本地即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2019.03-Linux-x86_64.sh</span></span><br></pre></td></tr></table></figure><p>至于安装步骤，一路按确认键即可，配置环境变量并让它生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure><p>在文件最尾端加入一下路径，比如我把安装目录放在了 <code>root</code> 下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PATH=$PATH:/root/anaconda3/bin</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> /etc/profile</span></span><br></pre></td></tr></table></figure><p>查看当前的 Python 环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@gzky_gz ~] conda --version</span><br><span class="line">conda 4.9.2</span><br><span class="line">[root@gzky_gz ~] python</span><br><span class="line">Python 3.7.9 (default, Aug 31 2020, 12:42:55) </span><br><span class="line">[GCC 7.3.0] :: Anaconda, Inc. on linux</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>至此，Anaconda安装完毕 ！！</p></blockquote><h3 id="pip-包管理工具"><a href="#pip-包管理工具" class="headerlink" title="pip 包管理工具"></a><code>pip</code> 包管理工具</h3><p>我们使用 <code>pip</code> 作为<code>Python</code>的包管理工具，安装 <code>anaconda</code> 完毕之后，我们<br>可以在黑窗口中键入<br><code>pip -V</code> 来查看 pip 版本</p><h2 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h2><p>在 Python 中，我们可以通过 pip 工具进行第三方库的安装，这也是最快、最简单的安装方式。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PyMysql</span><br></pre></td></tr></table></figure><p>但是由于一些第三方扩展存放于海外服务器，由于众所周知的原因我们无法通过正常手段获取，可以使用 -i 参数<br>指定源，加速安装扩展库:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PyMysql -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><h2 id="Python-虚拟环境"><a href="#Python-虚拟环境" class="headerlink" title="Python 虚拟环境"></a><code>Python</code> 虚拟环境</h2><p>成功安装 <code>Python</code> 之后默认只提供一个版本，比如 <code>Python3.7</code></p><blockquote><p>这对于习惯切换多版本开发的小伙伴可就不太友好了 ！！</p></blockquote><p>所以，为了兼容不同<code>Python</code>版本共同开发，我们需要使用 <code>Python</code> 虚拟环境</p><p>由于我们前面是使用 <code>conda</code> 搭建的 <code>Python</code> 环境，而 <code>conda</code> 也提供了 <code>Python</code>的虚拟环境，可以切换到不同的<code>Python</code><br>版本进行开发，不同版本之间相互隔离，是一个独立的操作环境 ！！</p><p>这里假设读者本地默认安装了 <code>Python3.7</code> 版本</p><h3 id="创建一个新的虚拟环境"><a href="#创建一个新的虚拟环境" class="headerlink" title="创建一个新的虚拟环境"></a>创建一个新的虚拟环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Python 3.6</span>  </span><br><span class="line"><span class="meta">$</span><span class="bash"> conda create -n venv_3.6 python=3.6</span>   </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Python 3.8</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> conda create -n venv_3.8 python=3.8</span></span><br></pre></td></tr></table></figure><p>其中 <code>-n</code> 指定了虚拟环境的名称，可以随便起，后面跟着 <code>Python</code> 和指定<code>版本号</code></p><p>查看创建的虚拟环境列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> conda env list</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> conda environments:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash">base                  *  D:\conda3</span></span><br><span class="line">venv_3.6                 D:\conda3\envs\venv_3.6</span><br><span class="line">venv_3.8                 D:\conda3\envs\venv_3.8</span><br></pre></td></tr></table></figure><blockquote><p>可以看到刚才创建的环境已经有了</p></blockquote><h3 id="激活并进入虚拟环境"><a href="#激活并进入虚拟环境" class="headerlink" title="激活并进入虚拟环境"></a>激活并进入虚拟环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Linux:   source activate venv</span><br><span class="line">Windows: activate venv</span><br></pre></td></tr></table></figure><h3 id="安装-pipenv"><a href="#安装-pipenv" class="headerlink" title="安装 pipenv"></a>安装 <code>pipenv</code></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pipenv</span><br></pre></td></tr></table></figure><p>进入新的虚拟环境会发现很多第三方工具和扩展包需要重新安装，比如 <code>PyMysql</code> 等等</p><p>想往常一样执行 <code>pip install pymysql</code> 安装第三方扩展即可</p><h3 id="删除一个现有的虚拟环境"><a href="#删除一个现有的虚拟环境" class="headerlink" title="删除一个现有的虚拟环境"></a>删除一个现有的虚拟环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将清空所有</span></span><br><span class="line">conda remove --name venv --all </span><br></pre></td></tr></table></figure><blockquote><p>注意，如果是<code>Pycharm</code>编辑器的话可以将设置中的项目控制中的<code>Python</code>解释器路径更改为 <code>venv</code> 的路径，更改生效后，这就意味着你已经进入了新的<code>Python</code>版本环境</p></blockquote><h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><p>在 <code>Python</code> 中我们推荐使用 <code>Pycharm</code> 编辑器来进行代码开发，这也是现在最主流的<code>Python</code> 编辑器了。</p><p>如果你经常和数据表格打交道，我强烈建议你使用 <code>Jupyter NoteBook</code>。</p><h2 id="Node-Npm"><a href="#Node-Npm" class="headerlink" title="Node | Npm"></a><code>Node</code> | <code>Npm</code></h2><blockquote><p><code>nodejs</code>： <a href="https://nodejs.org/en/download/">https://nodejs.org/en/download</a></p></blockquote><p>这里主要说说 <code>Linux</code> 下如何安装 <code>Node</code> 和 <code>Npm</code>，<code>windows</code> 安装 <code>node</code> 不再赘述。</p><ul><li><p>进入官方下载页面后，根据自己系统选择 <code>Linux Binaries (x64)</code> 或 <code>Linux Binaries (ARM)</code>，我这里是<br><code>Linux Binaries (x64)</code>，下载到本地后<code>解压</code>即可。</p></li><li><p><code>Linux</code> 一般的软件存放目录是 <code>/opt</code>，我们把它存在这里。</p></li><li><p>软链接到 <code>/usr/local/bin/</code> 目录，为了能够全局作用与 <code>node</code> 和 <code>npm</code>，我们还需要将其软链接到 <code>/usr/local/bin/</code> 目录</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /opt/node/bin/node /usr/local/bin/node</span><br><span class="line">sudo ln -s /opt/node/bin/npm /usr/local/bin/npm</span><br></pre></td></tr></table></figure><ul><li>如果<code>软链接</code>不可用或失效，可以直接将 <code>/opt/node</code> 加入到环境变量中</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure><p>添加至最后一行即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:/opt/node/bin</span><br></pre></td></tr></table></figure><p>生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>验证，查看版本信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -V</span><br><span class="line">npm -V</span><br></pre></td></tr></table></figure><blockquote><p>OK, 来到这就差不多够用了。</p></blockquote><br><blockquote><p>本文作者：T计划<br>版权声明：本文采用 知识共享 署名-非商业性使用-禁止演绎(CC BY-NC-ND)国际许可协议 进行许可</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 办公自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python,自动化 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
